/* colors from everforest https://github.com/sainnhe/everforest */
:root {
    --bg: #F3EAD3;
    --bg-light: #EAE4CA;
    --bg-dark: #E5DFC5;
    --sep: #E5DFC5;
    --text: #5C6A72;
    --text2: #939F91;
    --accent1: #8DA101;
    --accent2: #93B259;
    --accent3: #A7C080;
    --on-accent: #E5E6C5;

    --accent-grad: linear-gradient(135deg, var(--accent1), var(--accent2), var(--accent3));
    --rad: .4rem;
    --thick: .135rem;
    --thin: .1rem;
    --anim: .3s;
}

@media (prefers-color-scheme: dark) {
    :root {
        --bg: #333C43;
        --bg-light: #3A464C;
        --bg-dark: #293136;
        --sep: #434F55;
        --text: #D3C6AA;
        --text2: #859289;
        --accent1: #A7C080;
        --accent2: #93B259;
        --accent3: #8DA101;
        --on-accent: #3C4841;
    }

    /* should blind people less when in dark mode (see simple.css) */
    img {
        opacity: 80%;
    }

    /* makes the audio elem dark on chrome it's not perfect but at least it's not white */
    @supports selector(::-webkit-media-controls-panel) {
        audio {
            opacity: 80%;
            filter: invert();
        }
    }

}

/* mobile fixes */
@media only screen and (max-width: 720px) {

    textarea,
    select,
    input,
    button,
    video,
    audio {
        width: 100%;
    }

    dialog {
        max-width: 100%;
        margin: auto 1em;
    }

    aside {
        width: 100% !important;
        float: none !important;
        margin-inline-start: 0 !important;
        text-align: unset !important;
        margin: 0 !important;
        margin-bottom: 1rem !important;
    }
}

html {
    line-height: 1.8rem;
    scroll-behavior: smooth;
    /* following snippet snatched from modern-normalize.css*/
    font-family:
            system-ui,
            'Segoe UI',
            Roboto,
            Helvetica,
            Arial,
            sans-serif,
            'Apple Color Emoji',
            'Segoe UI Emoji';
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
}

body {
    font-size: 1.15rem;
    margin: 0;
    display: grid;
    grid-template-columns: 1fr 80% 1fr;
    background-color: var(--bg);
    color: var(--text);
}

body * {
    grid-column: 2;
}

/* scrollbar */
/*
webkit
while it feels more customizable, the firefox standard scrollbar with custom color is better
which feels counter intuitive, but i guess that's why they don't implement more scrollbar features
*/
*::-webkit-scrollbar {
    height: .4rem;
    width: .4rem;
}

*::-webkit-scrollbar-track:hover {
    background-color: var(--bg-dark);
}

*::-webkit-scrollbar-thumb {
    border-radius: var(--rad);
    background-color: var(--accent1);
}

*::-webkit-scrollbar-thumb:hover {
    background-color: var(--accent2);
}

*::-webkit-scrollbar-thumb:active {
    background-color: var(--accent3);
}

*::-webkit-scrollbar-corner,
*::-webkit-scrollbar-track {
    background-color: transparent;
}

/**
firefox, the browser with the better scrollbar (imho)
the rule is inside a @supports block so it doesn't apply to webkit browsers and makes their scrollbar even worse
*/
@supports not selector(::-webkit-scrollbar-thumb) {
    * {
        scrollbar-color: var(--accent1) var(--bg-dark);
    }
}

/***** Text *****/
/* header, like the big one at the start of the page */
body>header,
body>footer {
    grid-column: -1 / 1;
    text-align: center;
}

body>header {
    background-color: var(--bg-light);
    padding: 3.5rem;
    border-bottom: var(--sep) var(--thin) solid;
}

body>footer {
    background-color: var(--bg-dark);
    margin-top: 5rem;
    padding: 2.5rem 3.5rem;
    border-bottom: var(--sep) var(--thin) solid;
}

body>header>h1 {
    background: var(--accent-grad);
    background-clip: text;
    color: transparent;

    width: fit-content;
    padding: 0.5rem;
    margin: auto;

    filter: drop-shadow(var(--bg-dark) 0 0 .3rem);
}

body>header>p {
    margin: 1rem auto;
}

/** navigation **/
body > header > nav li {
    display: inline-block;
    margin: .5rem 0;
}

body > header > nav ul {
    list-style: none;
    padding: 0;
}

body > header > nav a {
    color: var(--text) !important;
    border-radius: var(--rad);
    padding: .35rem .7rem;
    /*margin: 1rem .2rem;*/
    border: var(--thick) solid var(--sep);
    transition: border var(--anim) ease-out, color var(--anim) ease-out;
}

/* dropdown */
body > header > nav a:not(:has(*)):not(:only-child):after {
    content: " ⏷";
}

body > header > nav a[href]:hover {
    color: var(--accent1) !important;
    text-decoration: none !important;
    border: var(--thick) dashed var(--accent1);
}

body > header > nav ul ul {
    display: none;
    position: absolute;
    background-color: var(--bg);
    border: var(--thin) solid var(--sep);
    border-radius: var(--rad);
    padding: 0;
    margin: .3rem;
}

body > header > nav li li {
    display: block;
    margin: 1rem;
}

body > header > nav li:hover ul {
    display: block;
    z-index: 1;
}

/* support for logos */
body > header > nav a:has(>img), body > header > nav a > img {
    border: none !important;
}

/* headers and paragraphs */
/* stolen from simple.css */
p,
h1,
h2,
h3,
h4,
h5,
h6 {
    overflow-wrap: break-word;
    word-wrap: break-word;

}

/* Format headers */
h1 {
    font-size: 3rem;
}

h2 {
    font-size: 2.6rem;
    margin-top: 3rem;
}

h3 {
    font-size: 2rem;
    margin-top: 3rem;
}

h4 {
    font-size: 1.44rem;
}

h5 {
    font-size: 1.15rem;
}

h6 {
    font-size: 0.96rem;
}

p {
    margin-top: 0;
    margin-bottom: 1rem;
}

/* Fix line height when title wraps */
h1,
h2,
h3 {
    line-height: 1.1;
}

/** blockquotes **/
blockquote {
    margin: 1rem;
    padding: 1rem;
    background-color: var(--bg-light);
    border-left: 0.3rem solid var(--accent1);
    border-radius: 0 var(--rad) var(--rad) 0;
}

blockquote:dir(rtl) {
    border-left: 0;
    border-right: 0.3rem solid var(--accent1);
    border-radius: var(--rad) 0 0 var(--rad);
}

blockquote p {
    margin-bottom: 0;
}

/** aside, idk i don't like them **/
aside {
    background-color: var(--bg-light);
    padding: 1rem;
    float: right;
    width: 25rem;
    border-radius: var(--rad);
    text-align: right;
    margin: 0.5rem 1.5rem;
    border: var(--thin) solid var(--sep);
}

aside:dir(rtl) {
    float: left;
    text-align: left;
}

/** description lists **/
dt {
    font-weight: bolder;
}

dd {
    margin-left: 2rem;
}

/* i feel this could be controversial */
dd::before {
    content: "↳ ";
    color: var(--text2);
    margin-inline-start: -1rem;
}

dd:dir(rtl)::before {
    content: "↲ ";
}

/** separator **/
hr {
    border: 0;
    border-bottom: var(--thick) solid var(--sep);
}

/** tables **/
table {
    width: 100%;
    border-spacing: 0;
    text-align: justify;
    border-collapse: collapse;
    margin-bottom: 1rem;
}

table caption {
    font-weight: bolder;
    font-size: 1.44rem;
    margin-bottom: 1rem;
}

thead th {
    border-bottom: var(--thick) solid var(--sep);
}

tbody td {
    border-bottom: var(--thin) solid var(--sep);
}

tfoot th {
    border-top: var(--thick) solid var(--sep);
}

td,
th {
    padding: .5rem;
}

tr:nth-child(even),
thead tr,
tfoot tr {
    background-color: var(--bg-light);
}

/** code **/
code,
samp,
pre {
    background-color: var(--bg-light);
    border-radius: var(--rad);
    padding: .3rem;
}

/* following snippet snatched from modern-normalize.css */
code,
kbd,
samp,
pre {
    font-family:
            ui-monospace,
            SFMono-Regular,
            Consolas,
            'Liberation Mono',
            Menlo,
            monospace;
    /*font-size: 1em;*/
}

pre {
    padding: 1rem;
    overflow-x: auto;
}

/* i think this is so cool, if you hover over it it moves down like a key :) */
/* yes, i get impressed easily */
kbd {
    background-color: var(--accent1);
    border: var(--thick) solid var(--accent2);
    border-bottom: calc(var(--thick)*3) solid var(--accent2);
    border-radius: var(--rad);
    color: var(--on-accent);
    padding: .1rem .3rem;
    transition: border-bottom-width var(--anim) ease-out, top var(--anim) ease-out;
    top: 0;
    position: relative;
}

kbd:hover {
    border-bottom-width: var(--thick);
    top: calc(var(--thick)*3);
}

/** inline formatting **/
/* links */
a[href] {
    color: var(--accent1);
    text-decoration: none;
}

a[href]:hover {
    color: var(--accent2);
    text-decoration: underline wavy var(--accent2);
}

a[href]:visited {
    color: var(--accent3);
    text-decoration: underline wavy var(--accent3);
}

/* move underline lower */
a[href],
u,
ins,
abbr {
    text-underline-position: under;
}

/* following snippet snatched from modern-normalize.css*/
b,
strong {
    font-weight: bolder;
}

small {
    color: var(--text2);
    font-size: 80%;
}

abbr[title] {
    cursor: help;
}

q {
    font-style: italic;
}

mark,
var,
time {
    border-radius: var(--rad);
    padding: .2rem .5rem .3rem;
    background-color: var(--bg-light);
}

mark {
    background: var(--accent-grad);
    color: var(--on-accent);
}

/* following snippet snatched from modern-normalize.css */
sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sub {
    bottom: -0.25em;
}

sup {
    top: -0.5em;
}

/***** embedded content *****/
img,
video,
embed,
object,
iframe,
canvas {
    max-width: 100%;
    height: auto;
    border-radius: var(--rad);
    border: var(--thin) solid var(--sep);
}

/*
changes slightly the background color of the audio element on firefox
chrome doesn't support this, well it does but it doesn't change the background, just colors behind the element
chrome does support some pseudo elements but i couldn't quite understand them and also they don't work quite right
for example changing the background makes the border aliased, the buttons/text don't change color with the color property

if someone wants to try this, this is a basic tutorial i found: https://blog.shahednasser.com/how-to-style-an-audio-element/
*/
@supports not selector(::-webkit-media-controls-panel) {
    audio {
        background-color: var(--bg-dark);
        border-radius: var(--rad);
    }
}

video {
    background-color: var(--bg-dark);
}

/* i guess why not theme even the meter? */
/* this supports only chrome though (maybe safari), firefox doesn't have a way to style the meter */
meter::-webkit-meter-bar {
    background-color: var(--bg-dark);
    border-radius: var(--rad);
    overflow: hidden;
}

meter::-webkit-meter-optimum-value {
    background-color: var(--accent1);
}

/** progress **/
progress {
    appearance: none;
    overflow: hidden;
    border-radius: var(--rad);
    height: .6rem;
    border: var(--thin) solid var(--sep);
    background-color: var(--bg-dark);
    --_bg: right linear-gradient(to right,
    var(--bg-dark) 42%,
    var(--accent1) 0%,
    var(--accent1) 58%,
    var(--bg-dark) 0%);
    --_bg-size: 250% 100%;
    --_anim: indeterminate 2s infinite cubic-bezier(0.66, 0, 0.34, 1);
}

progress:indeterminate {
    position: relative;
}

progress:indeterminate::after {
    content: "";
    inset: 0;
    position: absolute;
    background: var(--_bg);
    background-size: var(--_bg-size);
    animation: var(--_anim);
}

progress:indeterminate::-moz-progress-bar,
progress:indeterminate::-webkit-progress-bar {
    background: var(--_bg);
    background-size: var(--_bg-size);
    animation: var(--_anim);
}

@keyframes indeterminate {
    50% {
        background-position: left;
    }
}

progress::-webkit-progress-bar {
    background-color: var(--bg-dark);
}

progress::-webkit-progress-value {
    background-color: var(--accent1);
    transition: width 0.3s ease;
}

progress::-moz-progress-bar {
    background-color: var(--accent1);
    transition-property: width;
    transition-duration: 0.3s;
}

/** dialog **/
dialog {
    background-color: var(--bg);
    color: var(--text);
    border: var(--thin) solid var(--sep);
    border-radius: var(--rad);
    max-width: 40rem;
    padding: 1rem;
}

dialog::backdrop {
    background-color: var(--bg);
    opacity: 0.8;
}

/***** form elements *****/
/*
a warning to those who dare to edit this section, this is a mess, sorry, don't look at it too much
please
*/
fieldset {
    border: var(--thin) solid var(--sep);
    border-radius: var(--rad);
    padding: 1rem;
}

legend {
    color: var(--text2);
}

label {
    display: block;
    margin-bottom: .3rem;
}

textarea,
input,
select {
    appearance: none;
    border: 0;
    border-radius: var(--rad);
    padding: .4rem .6rem;
    background: var(--bg-dark);
    color: var(--text);
    font: inherit;
}

/*
 this adds a small arrow to the single selection element thing, and it has been shamelessly stolen from simple.css
 https://github.com/kevquirk/simple.css/blob/be882ce561b0fe5ced621cc64595c812790b2524/simple.css#L457-L467
*/
select:not([multiple]) {
    background-image: linear-gradient(45deg, transparent 49%, var(--text) 51%),
    linear-gradient(135deg, var(--text) 51%, transparent 49%);
    background-position: calc(100% - 15px), calc(100% - 10px);
    background-size: 5px 5px, 5px 5px;
    background-repeat: no-repeat;
    padding-inline-end: 25px;
}

select:not([multiple]):dir(rtl) {
    background-position: 10px, 15px;
}

select[multiple] {
    overflow-y: auto;
}

/* changes background color for selected option */
option:checked {
    background-color: var(--accent1);
    color: var(--on-accent);
}

/**
custom checkbox
this was a pain
- works like a checkbox
- uses the accent color
- animated hover effect
- i should've probably left the default checkbox
*/
input[type="checkbox"] {
    background-color: var(--bg-dark);
    margin: 0;
    padding: 0;
    color: var(--accent1);
    width: 1.25rem;
    height: 1.25rem;
    transform: translateY(0.16rem);
    transition: background-color .2s ease;
    cursor: pointer;
}

input[type="checkbox"]:checked::before {
    content: "";
    position: absolute;
    top: 15%;
    left: 30%;
    width: .5rem;
    height: .75rem;
    border-right: solid var(--bg-dark) 0.25rem;
    border-bottom: solid var(--bg-dark) 0.25rem;
    transform: rotate(40deg);
}

/**
custom radio button
this was a pain like the checkbox
- works like a radio button
- uses the accent color
- animated hover effect
- i should've probably left the default radio button
*/
input[type="radio"] {
    background-color: var(--bg-dark);
    margin: 0;
    padding: 0;
    color: var(--accent1);
    width: 1.25rem;
    height: 1.25rem;
    transform: translateY(0.16rem);
    border-radius: 100%;
    transition: background-color .2s ease;
    cursor: pointer;
}

input[type="radio"]:checked::before {
    content: " ";
    position: absolute;
    top: 50%;
    left: 50%;
    width: .6em;
    height: .6em;
    background-color: var(--bg-dark);
    border-radius: 100%;
    transform: translate(-50%, -50%);
}

/**
misc rules for checkboxes and radios
- hover background color
- disabled background color
- checked background color
- fix for the label
*/
input[type="checkbox"]:checked,
input[type="radio"]:checked {
    background-color: var(--accent1);
}

input[type="checkbox"]:hover:not(:disabled),
input[type="radio"]:hover:not(:disabled) {
    background-color: var(--accent2);
}

input[type="checkbox"]:active:not(:disabled),
input[type="radio"]:active:not(:disabled) {
    background-color: var(--accent3) !important;
}


input[type="checkbox"]:disabled,
input[type="radio"]:disabled {
    background-color: var(--bg-light);
    cursor: not-allowed;
}

input[type="checkbox"]+label,
input[type="radio"]+label {
    display: inline-block;
}

/* makes color picker bigger */
input[type="color"] {
    height: 2.5rem;
}

/*
range, most of the css here was from https://range-input-css.netlify.app/
the style change the thumb color to the accent color, the track gets the dark color and is also thinner (and rounded)
*/
input[type="range"] {
    appearance: none;
    background: transparent;
    cursor: pointer;
}

input[type="range"]:focus {
    outline: none;
}

/* webkit */
/* slider track */
input[type="range"]::-webkit-slider-runnable-track {
    background-color: var(--bg-dark);
    border-radius: var(--rad);
    height: 0.5rem;
}

/* slider thumb */
input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    /* Override default look */
    appearance: none;
    margin-top: -4px;
    /* Centers thumb on the track */
    background-color: var(--accent1);
    border-radius: 100%;
    height: 1rem;
    width: 1rem;
}

input[type="range"]:hover::-webkit-slider-thumb {
    background-color: var(--accent2);
}

input[type="range"]:active::-webkit-slider-thumb {
    background-color: var(--accent3);
}

input[type="range"]:focus::-webkit-slider-thumb {
    outline: var(--thick) var(--accent1);
    outline-offset: var(--thick);
}

/* firefox */
/* slider track */
input[type="range"]::-moz-range-track {
    background-color: var(--bg-dark);
    border-radius: var(--rad);
    height: 0.5rem;
}

/* slider thumb */
input[type="range"]::-moz-range-thumb {
    background-color: var(--accent1);
    border: none;
    /*Removes extra border that FF applies*/
    border-radius: var(--rad);
    height: 1rem;
    width: 1rem;
}

input[type="range"]:hover::-moz-range-thumb {
    background-color: var(--accent2);
}

input[type="range"]:active::-moz-range-thumb {
    background-color: var(--accent3);
}

input[type="range"]:focus::-moz-range-thumb {
    outline: var(--thick) solid var(--accent1);
    outline-offset: var(--thick);
}

/**
button styling
- use accent colors
- add hover effect (animated)
- change pointer
- rules for disabled buttons
*/
button,
input[type="submit"],
input[type="reset"],
input[type="button"],
input[type="file"]::file-selector-button {
    appearance: none;
    font: inherit;
    background: var(--accent1);
    color: var(--on-accent);
    border: 0;
    border-radius: var(--rad);
    padding: .4rem .6rem;
    cursor: pointer;
    transition: background-color .3s ease-out;
    margin: .1rem;
}

button:disabled,
input[type="submit"]:disabled,
input[type="reset"]:disabled,
input[type="button"]:disabled,
input[type="file"]:disabled::file-selector-button {
    background-color: var(--bg-light);
    color: var(--text2);
    cursor: not-allowed;
}

button:hover:not(:disabled),
input[type="submit"]:hover:not(:disabled),
input[type="reset"]:hover:not(:disabled),
input[type="button"]:hover:not(:disabled),
input[type="file"]:not(:disabled)::file-selector-button:hover {
    background-color: var(--accent2);
}

button:active:not(:disabled),
input[type="submit"]:active:not(:disabled),
input[type="reset"]:active:not(:disabled),
input[type="button"]:active:not(:disabled),
input[type="file"]:not(:disabled)::file-selector-button:active {
    background-color: var(--accent3) !important;
}

/**
file input button customization:
- moves the button to the right
- does some styling (same as buttons with some extra rules to center it)
- moves the focus to the button instead
*/
input[type="file"] {
    padding: .7rem .6rem;
    position: relative;
    /*width: 20rem;*/
    text-overflow: ellipsis;
}

input[type="file"]:focus {
    outline: none;
}

/**
most efficient way to make sure the selected file text doesn't end up under the button
1h30m later i realize that this isn't the most efficient way (it was ironic at first but now it's even less ironic)
why? just because chrome decided to not stick to the standards and make this possible but firefox didn't
thus this "most efficient way" is kinda working on some browsers and is also a hack
because surely some languages are longer than this filler text

i also have no idea how to make this work without the filler text and only with css
if there's one thing i learned about css is that it gives you too much freedom with some elements
and then just makes you unable to move elements with others
*/
input[type="file"]::after {
    display: inline-block;
    content: "this is filler:)";
    visibility: hidden;
}

input[type="file"]::file-selector-button {
    margin: 0 .4rem;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
}

input[type="file"]:focus::file-selector-button {
    outline: var(--thick) solid var(--accent1);
    outline-offset: var(--thick);
}

input[type="file"]::file-selector-button:dir(rtl) {
    left: 0;
    right: unset;
}

/* focus rules, so they are consistent and also are more in line with the theme */
:focus {
    outline: var(--thick) solid var(--accent1);
    outline-offset: var(--thick);
}

body>footer:last-child {
    grid-column: -1 / 1;
}

/* use different box model */
*,
::before,
::after {
    box-sizing: border-box;
}